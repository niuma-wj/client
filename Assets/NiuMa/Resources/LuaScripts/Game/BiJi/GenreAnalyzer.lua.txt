-- 描述：比鸡牌型分析器脚本
-- 作者：wujian
-- 邮箱：393817707@qq.com
-- 日期：2024.12.28

local Poker = require 'Common.Poker';
local pok_def = require 'Common.PokerDefines';

local _module = {};

-- 点数顺序表
_module.PointOrders =
{
    pok_def.PokerPoint.Joker,
    pok_def.PokerPoint.Two,
    pok_def.PokerPoint.Three,
    pok_def.PokerPoint.Four,
    pok_def.PokerPoint.Five,
    pok_def.PokerPoint.Six,
    pok_def.PokerPoint.Seven,
    pok_def.PokerPoint.Eight,
    pok_def.PokerPoint.Nine,
    pok_def.PokerPoint.Ten,
    pok_def.PokerPoint.Jack,
    pok_def.PokerPoint.Queen,
    pok_def.PokerPoint.King,
    pok_def.PokerPoint.Ace
};

function _module.GetOrderByPoint(point)
    for i = 1, 14 do
        if (_module.PointOrders[i] == point) then
            return i;
        end
    end
    return -1;
end

function _module.GetPointByOrder(order)
    if (order < 1 or order > 14) then
        return pok_def.PokerPoint.Invalid;
    end
    return _module.PointOrders[order];
end

function _module:Analyze(cards)
    self._cards = {};
    for k, v in pairs(cards) do
        self._cards[v] = k;
    end
    -- 每种点数对应的牌数量
    if (self._points == nil) then
        self._points = {};
    end
    for i = 1, 14 do
        self._points[i] = 0; 
    end
    -- 每种点数的4种花色的牌是否存在
    if (self._suits == nil) then
        self._suits = {};
    end
    for i = 1, 14 do
        if (self._suits[i] == nil) then
            self._suits[i] = { false, false, false, false };
        else
            for j = 1, 4 do
                self._suits[i][j] = false;
            end
        end
    end
    local order = 0;
    local point = 0;
    local suit = 0;
    for k, v in pairs(cards) do
        point, suit = Poker.FromInt32(v);
        order = self.GetOrderByPoint(point);
        if (order ~= -1) then
            self._points[order] = self._points[order] + 1;
        end
        if (suit == pok_def.PokerSuit.Little) then
            self._suits[order][2] = true;
            self._suits[order][4] = true;
        elseif (suit == pok_def.PokerSuit.Big) then
            self._suits[order][1] = true;
            self._suits[order][3] = true;
        else
            self._suits[order][suit] = true;
        end
    end
    self._triples = {};
    self._flushStraights = {};
    self._flushes = {};
    self._straights = {};
    self._pairs = {};
    self:SeekTriples();
    self:SeekStraights();
    self:SeekFlushes();
    self:SeekPairs();

    if (self._starts == nil) then
        self._starts = { 1, 1, 1, 1, 1 };
    else
        for i = 1, 5 do
            self._starts[i] = 1;
        end
    end
end

-- 搜索全部3张牌型
function _module:SeekTriples()
    local suits = {};
    local nums = 1;
    local test = false;
    local point = 0;
    local card = 0;
    for i = 2, 14 do
        if (self._points[i] > 2) then
            point = self.GetPointByOrder(i);
            for j = 1, 4 do
                nums = 1;
                for k = 1, 4 do
                    if (k ~= j) then
                        suits[nums] = k;
                        nums = nums + 1;
                    end
                end
                if (self._suits[i][suits[1]] and self._suits[i][suits[2]] and self._suits[i][suits[3]]) then
                    local ids = {};
                    for k = 1, 3 do
                        card = Poker.ToInt32(point, suits[k]);
                        table.insert(ids, self._cards[card]);
                    end
                    table.insert(self._triples, ids);
                end
            end
        end
    end
end

-- 搜索全部顺子
function _module:SeekStraights()
    local idx1 = 0;
    local idx2 = 0;
    local idx3 = 0;
    local point = 0;
    local card = 0;
    local sameSuit = false;
    for i = 1, 12 do
        if (i == 1) then
            -- 最小A23顺子
            idx1 = 14;
        else
            idx1 = i;
        end
        idx2 = i + 1;
        idx3 = i + 2;
        if ((self._points[idx1] > 0) and (self._points[idx2] > 0) and (self._points[idx3] > 0)) then
            for j = 1, 4 do
                if (self._suits[idx1][j]) then
                    for k = 1, 4 do
                        if (self._suits[idx2][k]) then
                            for p = 1, 4 do
                                if (self._suits[idx3][p]) then
                                    -- 由于lua语法不支持continue，所以只能写很深的循环
                                    local ids = {};
                                    point = self.GetPointByOrder(idx1);
                                    card = Poker.ToInt32(point, j);
                                    table.insert(ids, self._cards[card]);
                                    point = self.GetPointByOrder(idx2);
                                    card = Poker.ToInt32(point, k);
                                    table.insert(ids, self._cards[card]);
                                    point = self.GetPointByOrder(idx3);
                                    card = Poker.ToInt32(point, p);
                                    table.insert(ids, self._cards[card]);
                                    table.insert(self._straights, ids);
                                    if (j == k and k == p) then
                                        table.insert(self._flushStraights, ids);
                                    end
                                end -- if
                            end -- for p
                        end -- if
                    end -- for k
                end -- if
            end -- for j
        end -- if
    end -- for i
end

-- 搜索全部同花
function _module:SeekFlushes()
    local point = 0;
    local suit = 0;
    local card = 0;
    for i = 1, 4 do
        for j = 1, 12 do
            for k = j + 1, 13 do
                for p = k + 1, 14 do
                    if (self._suits[j][i] and self._suits[k][i] and self._suits[p][i]) then
                        if (j == 1) then
                            if (i == 1 or i == 3) then
                                suit = pok_def.PokerSuit.Big;
                            else
                                suit = pok_def.PokerSuit.Little;
                            end
                        else
                            suit = i;
                        end
                        local ids = {};
                        point = self.GetPointByOrder(j);
                        card = Poker.ToInt32(point, suit);
                        table.insert(ids, self._cards[card]);
                        point = self.GetPointByOrder(k);
						suit = i;
                        card = Poker.ToInt32(point, suit);
                        table.insert(ids, self._cards[card]);
                        point = self.GetPointByOrder(p);
                        card = Poker.ToInt32(point, suit);
                        table.insert(ids, self._cards[card]);
                        table.insert(self._flushes, ids);
                    end
                end
            end
        end
    end
end

-- 搜索全部对子
function _module:SeekPairs()
    local suits = {};
    local test = false;
    local point = 0;
    local card = 0;
    for i = 1, 14 do
        if (self._points[i] > 1) then
			if (i == 1) then
				local ids = {};
				card = Poker.ToInt32(pok_def.PokerPoint.Joker, pok_def.PokerSuit.Little);
				table.insert(ids, self._cards[card]);
				card = Poker.ToInt32(pok_def.PokerPoint.Joker, pok_def.PokerSuit.Big);
				table.insert(ids, self._cards[card]);
				table.insert(self._pairs, ids);
			else
				point = self.GetPointByOrder(i);
				for j = 1, 3 do
					for k = j + 1, 4 do
						if (self._suits[i][j] and self._suits[i][k]) then
							local ids = {};
							card = Poker.ToInt32(point, j);
							table.insert(ids, self._cards[card]);
							card = Poker.ToInt32(point, k);
							table.insert(ids, self._cards[card]);
							table.insert(self._pairs, ids);
						end
					end
				end
			end
        end
    end
end

function _module:IsSupportGenre(genre)
    if (genre < 1 or genre > 5) then
        return false;
    end
    local nums = 0;
    if (genre == 1) then
        nums = #(self._triples);
    elseif (genre == 2) then
        nums = #(self._flushStraights);
    elseif (genre == 3) then
        nums = #(self._flushes);
    elseif (genre == 4) then
        nums = #(self._straights);
    elseif (genre == 5) then
        nums = #(self._pairs);
    end
    return (nums > 0);
end

function _module:GetGenreCardIds(genre)
    if (genre < 1 or genre > 5) then
        return nil;
    end
    local genres = nil;
    if (genre == 1) then
        genres = self._triples;
    elseif (genre == 2) then
        genres = self._flushStraights;
    elseif (genre == 3) then
        genres = self._flushes;
    elseif (genre == 4) then
        genres = self._straights;
    elseif (genre == 5) then
        genres = self._pairs;
    end
    if (#genres == 0) then
        return nil;
    end
    if (self._starts[genre] > #genres) then
        self._starts[genre] = 1;
    end
    local idx = self._starts[genre];
    local ids = genres[idx];
    self._starts[genre] = idx + 1;
    return ids;
end

function _module.NewInstance()
    local t = setmetatable({}, { __index = _module });
    return t;
end

return _module;