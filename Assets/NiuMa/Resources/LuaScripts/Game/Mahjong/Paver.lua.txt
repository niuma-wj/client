local mah_def = require 'Game.Mahjong.MahjongDefines';
local Vector2 = CS.UnityEngine.Vector2;
local Vector3 = CS.UnityEngine.Vector3;

local _module = {};

--手牌规尺：x终点、y终点、x增量、y增量、x缩放、y缩放
_module._handRules = {};
_module._handRules[1] = { ['endX'] = 452,  ['endY'] = -318, ['deltaX'] = -84, ['deltaY'] = 0,   ['scaleX'] = 1, ['scaleY'] = 1 };
_module._handRules[2] = { ['endX'] = 550,  ['endY'] = 260,  ['deltaX'] = 0,   ['deltaY'] = -32, ['scaleX'] = 1, ['scaleY'] = 1 };
_module._handRules[3] = { ['endX'] = -240, ['endY'] = 300,  ['deltaX'] = 56,  ['deltaY'] = 0,   ['scaleX'] = 1, ['scaleY'] = 1 };
_module._handRules[4] = { ['endX'] = -550, ['endY'] = -102, ['deltaX'] = 0,   ['deltaY'] = 32,  ['scaleX'] = 1, ['scaleY'] = 1 };
--显示手牌规尺
_module._showRules = {};
_module._showRules[1] = { ['endX'] = 452,  ['endY'] = -318, ['deltaX'] = -84, ['deltaY'] = 0,   ['scaleX'] = 1,     ['scaleY'] = 1 };
_module._showRules[2] = { ['endX'] = 550,  ['endY'] = 260,  ['deltaX'] = 0,   ['deltaY'] = -32, ['scaleX'] = 0.43,  ['scaleY'] = 0.43 };
_module._showRules[3] = { ['endX'] = -240, ['endY'] = 300,  ['deltaX'] = 56,  ['deltaY'] = 0,   ['scaleX'] = 0.655, ['scaleY'] = 0.655 };
_module._showRules[4] = { ['endX'] = -550, ['endY'] = -102, ['deltaX'] = 0,   ['deltaY'] = 32,  ['scaleX'] = 0.43,  ['scaleY'] = 0.43 };
--牌章规尺
_module._downRules = {};
_module._downRules[1] = { ['startX'] = -556, ['startY'] = -318, ['deltaX'] = 75, ['deltaY'] = 0,   ['scaleX'] = 0.9,  ['scaleY'] = 0.9,  ['gapX'] = 10,  ['gapY'] = 0,   ['gangY'] = 24 };
_module._downRules[2] = { ['startX'] = 550,  ['startY'] = -190, ['deltaX'] = 0,  ['deltaY'] = 32,  ['scaleX'] = 0.43, ['scaleY'] = 0.43, ['gapX'] = 0,   ['gapY'] = 18,  ['gangY'] = 9 };
_module._downRules[3] = { ['startX'] = 450,  ['startY'] = 290,  ['deltaX'] = -50, ['deltaY'] = 0,  ['scaleX'] = 0.6,  ['scaleY'] = 0.6,  ['gapX'] = -10, ['gapY'] = 0,   ['gangY'] = 16 };
_module._downRules[4] = { ['startX'] = -550, ['startY'] = 350,  ['deltaX'] = 0,  ['deltaY'] = -32, ['scaleX'] = 0.43, ['scaleY'] = 0.43, ['gapX'] = 0,   ['gapY'] = -18, ['gangY'] = 9 };
--打出去的牌规尺
_module._playedRules = {};
_module._playedRules[1] = { ['startX'] = -250, ['startY'] = -102, ['deltaX1'] = 50,  ['deltaY1'] = 0,   ['deltaX2'] = 0,   ['deltaY2'] = -58, ['scaleX'] = 0.6, ['scaleY'] = 0.6, ['cols'] = 11 };
_module._playedRules[2] = { ['startX'] = 324,  ['startY'] = -180, ['deltaX1'] = 0,   ['deltaY1'] = 45,  ['deltaX2'] = 68,  ['deltaY2'] = 0,   ['scaleX'] = 0.6, ['scaleY'] = 0.6, ['cols'] = 9 };
_module._playedRules[3] = { ['startX'] = 250,  ['startY'] = 122,  ['deltaX1'] = -50, ['deltaY1'] = 0,   ['deltaX2'] = 0,   ['deltaY2'] = 58,  ['scaleX'] = 0.6, ['scaleY'] = 0.6, ['cols'] = 11 };
_module._playedRules[4] = { ['startX'] = -324, ['startY'] = 180,  ['deltaX1'] = 0,   ['deltaY1'] = -45, ['deltaX2'] = -68, ['deltaY2'] = 0,   ['scaleX'] = 0.6, ['scaleY'] = 0.6, ['cols'] = 9 };
_module._fetchTilePositions = {};
_module._fetchTilePositions[1] = Vector2(560, -318);
_module._fetchTilePositions[2] = Vector2(550, 340);
_module._fetchTilePositions[3] = Vector2(-310, 300);
_module._fetchTilePositions[4] = Vector2(-550, -182);

_module.ActionEffect = {};
_module.ActionEffect.Chi = 1;
_module.ActionEffect.Peng = 2;
_module.ActionEffect.Gang = 3;
_module.ActionEffect.FangPao = 4;
_module.ActionEffect.JiePao = 5;
_module.ActionEffect.ZiMo = 6;
_module._effectPositions = {};
_module._effectPositions[1] = Vector2(0, -200);
_module._effectPositions[2] = Vector2(400, 0);
_module._effectPositions[3] = Vector2(0, 200);
_module._effectPositions[4] = Vector2(-400, 0);

function _module:Init(obj)
	if (obj == nil) then
		return;
	end
	self.gameObject = obj;
	self._handParents = {};
	self._downParents = {};
	self._playedParents = {};
	self._handTiles = {};
	self._downTiles = {};
	self._playedTiles = {};
	self._fetchTiles = {};
	self._chapterNums = {};	--当前牌章数量
	local child1 = nil;
	local child2 = nil;
	for i = 1, 4 do
		child1 = obj.transform:Find("Seat"..i);
		if (child1 ~= nil) then
			child2 = child1:Find("Hand");
			if (child2 ~= nil) then
				self._handParents[i] = child2;
			end
			child2 = child1:Find("Down");
			if (child2 ~= nil) then
				self._downParents[i] = child2;
			end
			child2 = child1:Find("Played");
			if (child2 ~= nil) then
				self._playedParents[i] = child2;
			end
		end
		self._handTiles[i] = {};
		self._downTiles[i] = {};
		self._playedTiles[i] = {};
	end
	child1 = obj.transform:Find("Pointer");
	if (child1 ~= nil) then
		self._pointer = child1.gameObject;
	end
	local rm = CS.NiuMa.ResourceManager.Instance;
	self._handTilePrefabs = {};
	self._handTilePrefabs[1] = rm:LoadResource("Prefabs/Game/Mahjong/Tiles/HandSouth", "prefabs/mahjong_tiles.ab", "Assets/NiuMa/Resources/", ".prefab");
	self._handTilePrefabs[2] = rm:LoadResource("Prefabs/Game/Mahjong/Tiles/HandEast", "prefabs/mahjong_tiles.ab", "Assets/NiuMa/Resources/", ".prefab");
	self._handTilePrefabs[3] = rm:LoadResource("Prefabs/Game/Mahjong/Tiles/HandNorth", "prefabs/mahjong_tiles.ab", "Assets/NiuMa/Resources/", ".prefab");
	self._handTilePrefabs[4] = rm:LoadResource("Prefabs/Game/Mahjong/Tiles/HandWest", "prefabs/mahjong_tiles.ab", "Assets/NiuMa/Resources/", ".prefab");
	self._downTilePrefabs = {};
	self._downTilePrefabs[1] = rm:LoadResource("Prefabs/Game/Mahjong/Tiles/DownSouth", "prefabs/mahjong_tiles.ab", "Assets/NiuMa/Resources/", ".prefab");
	self._downTilePrefabs[2] = rm:LoadResource("Prefabs/Game/Mahjong/Tiles/DownEast", "prefabs/mahjong_tiles.ab", "Assets/NiuMa/Resources/", ".prefab");
	self._downTilePrefabs[3] = rm:LoadResource("Prefabs/Game/Mahjong/Tiles/DownSouth", "prefabs/mahjong_tiles.ab", "Assets/NiuMa/Resources/", ".prefab");
	self._downTilePrefabs[4] = rm:LoadResource("Prefabs/Game/Mahjong/Tiles/DownWest", "prefabs/mahjong_tiles.ab", "Assets/NiuMa/Resources/", ".prefab");
	self._hideTilePrefabs = {};
	self._hideTilePrefabs[1] = rm:LoadResource("Prefabs/Game/Mahjong/Tiles/HideSouth", "prefabs/mahjong_tiles.ab", "Assets/NiuMa/Resources/", ".prefab");
	self._hideTilePrefabs[2] = rm:LoadResource("Prefabs/Game/Mahjong/Tiles/HideEast", "prefabs/mahjong_tiles.ab", "Assets/NiuMa/Resources/", ".prefab");
	self._hideTilePrefabs[3] = rm:LoadResource("Prefabs/Game/Mahjong/Tiles/HideSouth", "prefabs/mahjong_tiles.ab", "Assets/NiuMa/Resources/", ".prefab");
	self._hideTilePrefabs[4] = rm:LoadResource("Prefabs/Game/Mahjong/Tiles/HideWest", "prefabs/mahjong_tiles.ab", "Assets/NiuMa/Resources/", ".prefab");
    self._effectPrefabs = {};
    self._effectPrefabs[1] = rm:LoadResource("Prefabs/Game/Mahjong/EffectChi", "prefabs/mahjong_main.ab", "Assets/NiuMa/Resources/", ".prefab");
    self._effectPrefabs[2] = rm:LoadResource("Prefabs/Game/Mahjong/EffectPeng", "prefabs/mahjong_main.ab", "Assets/NiuMa/Resources/", ".prefab");
    self._effectPrefabs[3] = rm:LoadResource("Prefabs/Game/Mahjong/EffectGang", "prefabs/mahjong_main.ab", "Assets/NiuMa/Resources/", ".prefab");
    self._effectPrefabs[4] = rm:LoadResource("Prefabs/Game/Mahjong/EffectFangPao", "prefabs/mahjong_main.ab", "Assets/NiuMa/Resources/", ".prefab");
    self._effectPrefabs[5] = rm:LoadResource("Prefabs/Game/Mahjong/EffectJiePao", "prefabs/mahjong_main.ab", "Assets/NiuMa/Resources/", ".prefab");
    self._effectPrefabs[6] = rm:LoadResource("Prefabs/Game/Mahjong/EffectZiMo", "prefabs/mahjong_main.ab", "Assets/NiuMa/Resources/", ".prefab");
	self._selectedTile = -1;
end

function _module:SetRoom(r)
	self._room = r;
end

function _module:ClearTable()
	for i = 1, 4 do
		self:ClearHandTiles(i);
		self:ClearChapters(i);
		self:ClearPlayedTiles(i);
	end
	for i = 1, 4 do
		if (self._fetchTiles[i] ~= nil) then
			CS.UnityEngine.GameObject.Destroy(self._fetchTiles[i]);
			self._fetchTiles[i] = nil;
		end
	end
	if (self._pointer ~= nil) then
		self._pointer:SetActive(false);
	end
	self._selectedTile = -1;
	self._fetchID = nil;
end

function _module:OnDealTiles(msg)
	self:ClearTable();
	self:CreateLocalHandTiles(msg.tiles);
	for i = 2, 4 do
		self:CreateOtherHandTiles(i, 13);
	end
end

--计算手牌位置
--clientSeat:客户端座位(1~4)
--offset:牌索引离末尾牌索引距离
function _module:HandTilePosition(clientSeat, offset)
	if (clientSeat < 1 or clientSeat > 4) then
		return;
	end
	local x = self._handRules[clientSeat].endX;
	local y = self._handRules[clientSeat].endY;
	local dx = self._handRules[clientSeat].deltaX;
	local dy = self._handRules[clientSeat].deltaY;
	x = x + dx * offset;
	y = y + dy * offset;
	return x, y;
end

function _module:ShowTilePosition(clientSeat, offset)
	if (clientSeat < 1 or clientSeat > 4) then
		return;
	end
	local x = self._showRules[clientSeat].endX;
	local y = self._showRules[clientSeat].endY;
	local dx = self._showRules[clientSeat].deltaX;
	local dy = self._showRules[clientSeat].deltaY;
	x = x + dx * offset;
	y = y + dy * offset;
	return x, y;
end

function _module:PlaceHandTile(clientSeat, offset, obj)
	if (clientSeat < 1 or clientSeat > 4) then
		return;
	end
	if (obj == nil) then
		return;
	end
	local rcTrans = obj.transform;
	if (rcTrans == nil) then
		return;
	end
	local x, y = self:HandTilePosition(clientSeat, offset);
	rcTrans.anchoredPosition = Vector2(x, y);
	x = self._handRules[clientSeat].scaleX;
	y = self._handRules[clientSeat].scaleY;
	rcTrans.localScale = Vector3(x, y, 1.0);
end

function _module:PlaceShowTile(clientSeat, offset, obj)
	if (clientSeat < 1 or clientSeat > 4) then
		return;
	end
	if (obj == nil) then
		return;
	end
	local rcTrans = obj.transform;
	if (rcTrans == nil) then
		return;
	end
	local x, y = self:ShowTilePosition(clientSeat, offset);
	rcTrans.anchoredPosition = Vector2(x, y);
	x = self._showRules[clientSeat].scaleX;
	y = self._showRules[clientSeat].scaleY;
	rcTrans.localScale = Vector3(x, y, 1.0);
end

function _module:ClearHandTiles(clientSeat)
	if (self._handTiles[clientSeat] == nil) then
		return;
	end
	for k, v in pairs(self._handTiles[clientSeat]) do
		if (v ~= nil) then
			CS.UnityEngine.GameObject.Destroy(v);
		end
	end
	self._handTiles[clientSeat] = {};
	if (self._fetchTiles[clientSeat] ~= nil) then
		CS.UnityEngine.GameObject.Destroy(self._fetchTiles[clientSeat]);
		self._fetchTiles[clientSeat] = nil;
	end
	if (clientSeat == 1) then
		self._selectedTile = -1;
	end
end

function _module:CreateLocalHandTiles(tiles)
	self:ClearHandTiles(1);
	local length = #tiles;
	local tmp = length % 3;
	local tmpTile = nil;
	if (tmp == 2) then
		tmpTile = tiles[length];
		length = length - 1;
	end
	for i = 1, length do
		local obj = CS.UnityEngine.GameObject.Instantiate(self._handTilePrefabs[1], self._handParents[1]);
		if (obj ~= nil) then
			obj.name = "hand"..i;
			local mb = obj:GetComponent("MahjongBrick");
			if (mb ~= nil) then
				mb:SetMahjongSprites(self.gameObject);
				mb:SetMahjongTile(tiles[i].tile.pattern, tiles[i].tile.number, tiles[i].id);
				mb:SetMahjongPaver(self);
			end
			self:PlaceHandTile(1, length - i, obj);
			self._handTiles[1][tiles[i].id] = obj;
		end
	end
	if (tmpTile ~= nil) then
		self:CreateFetchTile(1, tmpTile);
	end
end

function _module:CreateOtherHandTiles(clientSeat, nums)
	if (clientSeat < 2 or clientSeat > 4 or nums < 1) then
		return;
	end
	local exp1 = 1;
	local exp2 = nums;
	local exp3 = 1;
	if (clientSeat == 2) then
		exp1 = nums;
		exp2 = 1;
		exp3 = -1;
	end
	self:ClearHandTiles(clientSeat);
	for i = exp1, exp2, exp3 do
		local obj = CS.UnityEngine.GameObject.Instantiate(self._handTilePrefabs[clientSeat], self._handParents[clientSeat]);
		if (obj ~= nil) then
			obj.name = "hand"..i;
			self:PlaceHandTile(clientSeat, nums - i, obj);
			self._handTiles[clientSeat][i] = obj;
		end
	end
end

function _module:CreateShowTiles(clientSeat, tiles)
	if (clientSeat < 1 or clientSeat > 4) then
		return;
	end
	self:ClearHandTiles(clientSeat);
	local length = #tiles;
	local tmp = length % 3;
	local tmpTile = nil;
	if (tmp == 2) then
		tmpTile = tiles[length];
		length = length - 1;
	end
	for i = 1, length do
		local obj = CS.UnityEngine.GameObject.Instantiate(self._downTilePrefabs[clientSeat], self._handParents[clientSeat]);
		if (obj ~= nil) then
			obj.name = "show"..i;
			local mb = obj:GetComponent("MahjongBrick");
			if (mb ~= nil) then
				mb:SetMahjongSprites(self.gameObject);
				mb:SetMahjongTile(tiles[i].tile.pattern, tiles[i].tile.number, tiles[i].id);
			end
			self:PlaceShowTile(clientSeat, length - i, obj);
			self._handTiles[clientSeat][tiles[i].id] = obj;
            if (clientSeat == 2) then
                local trans = obj.transform;
                if (trans ~= nil) then
                    trans:SetAsFirstSibling();
                end
            end
		end
	end
	if (tmpTile ~= nil) then
		self:CreateFetchTile(clientSeat, tmpTile, true);
	end
end

function _module:CreateFetchTile(clientSeat, tile, show)
	if (clientSeat < 1 or clientSeat > 4) then
		return;
	end
	if (self._fetchTiles[clientSeat] ~= nil) then
		CS.UnityEngine.GameObject.Destroy(self._fetchTiles[clientSeat]);
		self._fetchTiles[clientSeat] = nil;
	end
	local prefab = nil;
	if (show) then
		prefab = self._downTilePrefabs[clientSeat];
	else
		prefab = self._handTilePrefabs[clientSeat];
	end
	local obj = CS.UnityEngine.GameObject.Instantiate(prefab, self._handParents[clientSeat]);
	if (obj ~= nil) then
		obj.name = "fetch";
		self._fetchTiles[clientSeat] = obj;
		local rcTrans = obj.transform;
		rcTrans.anchoredPosition = self._fetchTilePositions[clientSeat];
		local x = 1;
		local y = 1;
		if (show) then
			x = self._showRules[clientSeat].scaleX;
			y = self._showRules[clientSeat].scaleY;
		else
			x = self._handRules[clientSeat].scaleX;
			y = self._handRules[clientSeat].scaleY;
		end
		rcTrans.localScale = Vector3(x, y, 1.0);
		if (clientSeat == 1 or show) then
			local mb = obj:GetComponent("MahjongBrick");
			if (mb ~= nil) then
				mb:SetMahjongSprites(self.gameObject);
				mb:SetMahjongTile(tile.tile.pattern, tile.tile.number, tile.id);
				if (not show) then
					mb:SetMahjongPaver(self);
				end
			end
			self._fetchID = tile.id;
		end
	end
end

function _module:RemoveFetchTile(clientSeat)
	if (self._fetchTiles[clientSeat] ~= nil) then
		CS.UnityEngine.GameObject.Destroy(self._fetchTiles[clientSeat]);
		self._fetchTiles[clientSeat] = nil;
	end
	if (clientSeat == 1) then
		if (self._selectedTile == self._fetchID) then
			self._selectedTile = -1;
		end
		self._fetchID = nil;
	end
end

function _module:GetHandTileNums(clientSeat)
    if (self._handTiles[clientSeat] == nil) then
        return 0;
    end
    local nums = 0;
	for k, v in pairs(self._handTiles[clientSeat]) do
		nums = nums + 1;
	end
    if (self._fetchTiles[clientSeat] ~= nil) then
        nums = nums + 1;
    end
    return nums;
end

function _module:ClearChapters(clientSeat)
	if (self._downTiles[clientSeat] == nil) then
		return;
	end
	for i, v in ipairs(self._downTiles[clientSeat]) do
		CS.UnityEngine.GameObject.Destroy(v);
	end
	self._downTiles[clientSeat] = {};
	self._chapterNums[clientSeat] = 0;
end

function _module:CreateChapters(clientSeat, chapters)
	if (clientSeat < 1 or clientSeat > 4 or chapters == nil) then
		return;
	end
	self:ClearChapters(clientSeat);
	for i, v in ipairs(chapters) do
		self:AddChapter(clientSeat, v);
	end
end

function _module.GetChapterType(chapter)
	if (chapter == nil) then
		return mah_def.MahjongChapter.Invalid;
	end
	for i = 3, 1, -1 do
		if (chapter.types[i] ~= mah_def.MahjongChapter.Invalid) then
			return chapter.types[i];
		end
	end
	return mah_def.MahjongChapter.Invalid;
end

--计算玩家2相对玩家1的位置:1-玩家2为玩家1的上家、2-对家、3-下家
--注：这里的位置为客户端位置
function _module.RelativePosition(pos1, pos2)
    if (pos1 == pos2) then
        return 2;
	end
    local relPos = (pos1 + 4 - pos2) % 4;
    return relPos;
end

function _module:AddChapter(clientSeat, chapter)
	if (clientSeat < 1 or clientSeat > 4 or chapter == nil) then
		return;
	end
	if (self._chapterNums[clientSeat] == nil) then
		self._chapterNums[clientSeat] = 0;
	end
	local nums = self._chapterNums[clientSeat];
	local startX = self._downRules[clientSeat].startX;
	local startY = self._downRules[clientSeat].startY;
	local deltaX = self._downRules[clientSeat].deltaX;
	local deltaY = self._downRules[clientSeat].deltaY;
	local scaleX = self._downRules[clientSeat].scaleX;
	local scaleY = self._downRules[clientSeat].scaleY;
	local gapX = self._downRules[clientSeat].gapX;
	local gapY = self._downRules[clientSeat].gapY;
	local gangY = self._downRules[clientSeat].gangY;
	local tileNums = #(chapter.tiles);
	local tile = nil;
	local prefab = nil;
	local type = self.GetChapterType(chapter);
	local hide = false;
	local tmp = 1;
	local positions = {};
	local transforms = {};
	for i = 1, 3 do
		positions[i] = Vector2(0, 0);
		positions[i].x = startX + (nums * 3 + i - 1) * deltaX + nums * gapX;
		positions[i].y = startY + (nums * 3 + i - 1) * deltaY + nums * gapY;
	end
	if (tileNums == 0 and type == mah_def.MahjongChapter.AnGang) then
		tileNums = 4;
	end
	for i = 1, tileNums do
		if (type == mah_def.MahjongChapter.AnGang) then
			hide = (i < 4);
		elseif (type == mah_def.MahjongChapter.JiaGang) then
			hide = (i == 4);
		else
			hide = false;
		end
		tile = chapter.tiles[i];
		if (tile == nil) then
			hide = true;
		end
		if (hide) then
			prefab = self._hideTilePrefabs[clientSeat];
		else
			prefab = self._downTilePrefabs[clientSeat];
		end
		local obj = CS.UnityEngine.GameObject.Instantiate(prefab, self._downParents[clientSeat]);
		if (obj ~= nil) then
			obj.name = "chapter" .. (nums + 1) .. "_" .. i;
			if (not hide) then
				local mb = obj:GetComponent("MahjongBrick");
				if (mb ~= nil) then
					mb:SetMahjongSprites(self.gameObject);
					mb:SetMahjongTile(tile.tile.pattern, tile.tile.number, tile.id);
				end
			end
			local rcTrans = obj.transform;
			if (rcTrans ~= nil) then
				if (i < 4) then
					rcTrans.anchoredPosition = positions[i];
				else
					if (type == mah_def.MahjongChapter.AnGang) then
						positions[4] = positions[2];
					else
						tmp = self._room:Server2ClientSeat(chapter.targetPlayer);
						tmp = self.RelativePosition(clientSeat, tmp);
						positions[4] = positions[tmp];
					end
					positions[4].y = positions[4].y + gangY;
					rcTrans.anchoredPosition = positions[4];
				end
				rcTrans.localScale = Vector3(scaleX, scaleY, 1.0);
				if (clientSeat == 2) then
					transforms[i] = rcTrans;
				end
			end
			tmp = #(self._downTiles[clientSeat]);
			self._downTiles[clientSeat][tmp + 1] = obj;
		end
	end
	if (clientSeat == 2) then
		if (transforms[4] ~= nil) then
			transforms[4]:SetAsFirstSibling();
		end
		for i = 1, 3 do
			if (transforms[i] ~= nil) then
				transforms[i]:SetAsFirstSibling();
			end
		end
	end
	self._chapterNums[clientSeat] = self._chapterNums[clientSeat] + 1;
end

function _module:ClearPlayedTiles(clientSeat)
	if (self._playedTiles[clientSeat] == nil) then
		return;
	end
	for i, v in ipairs(self._playedTiles[clientSeat]) do
		CS.UnityEngine.GameObject.Destroy(v);
	end
	self._playedTiles[clientSeat] = {};
end

function _module:CreatePlayedTiles(clientSeat, playedTiles)
	if (clientSeat < 1 or clientSeat > 4 or playedTiles == nil) then
		return;
	end
	self:ClearPlayedTiles(clientSeat);
	for i, v in ipairs(playedTiles) do
		self:AddPlayedTile(clientSeat, v);
	end
end

function _module:AddPlayedTile(clientSeat, tile, pointer)
	if (clientSeat < 1 or clientSeat > 4 or tile == nil) then
		return;
	end
	local startX = self._playedRules[clientSeat].startX;
	local startY = self._playedRules[clientSeat].startY;
	local deltaX1 = self._playedRules[clientSeat].deltaX1;
	local deltaY1 = self._playedRules[clientSeat].deltaY1;
	local deltaX2 = self._playedRules[clientSeat].deltaX2;
	local deltaY2 = self._playedRules[clientSeat].deltaY2;
	local scaleX = self._playedRules[clientSeat].scaleX;
	local scaleY = self._playedRules[clientSeat].scaleY;
	local cols = self._playedRules[clientSeat].cols;
	local nums = #(self._playedTiles[clientSeat]);
	local row = math.floor(nums / cols);
	local col = nums % cols;
	local x = startX + col * deltaX1 + row * deltaX2;
	local y = startY + col * deltaY1 + row * deltaY2;
	local prefab = self._downTilePrefabs[clientSeat];
	local obj = CS.UnityEngine.GameObject.Instantiate(prefab, self._playedParents[clientSeat]);
	if (obj ~= nil) then
		obj.name = "played" .. (nums + 1);
		local mb = obj:GetComponent("MahjongBrick");
		if (mb ~= nil) then
			mb:SetMahjongSprites(self.gameObject);
			mb:SetMahjongTile(tile.tile.pattern, tile.tile.number, tile.id);
		end
		local rcTrans = obj.transform;
		if (rcTrans ~= nil) then
			rcTrans.anchoredPosition = Vector2(x, y);
			rcTrans.localScale = Vector3(scaleX, scaleY, 1.0);
			if (clientSeat == 2 or clientSeat == 3) then
				rcTrans:SetAsFirstSibling();
			end
		end
		self._playedTiles[clientSeat][nums + 1] = obj;
	end
	if (pointer and self._pointer ~= nil) then
		self._pointer:SetActive(true);
		local rcTrans = self._pointer.transform;
		if (rcTrans ~= nil) then
            if (clientSeat == 2 or clientSeat == 4) then
			    rcTrans.anchoredPosition = Vector2(x, y + 30.0);
            else
                rcTrans.anchoredPosition = Vector2(x, y + 50.0);
            end
		end
	end
end

function _module:RemoveLastPlayedTile(clientSeat)
    if (clientSeat < 1 or clientSeat > 4 or self._playedTiles[clientSeat] == nil) then
		return;
	end
    local nums = #(self._playedTiles[clientSeat]);
    if (nums < 1) then
        return;
    end
    local obj = self._playedTiles[clientSeat][nums];
    if (obj ~= nil) then
        CS.UnityEngine.GameObject.Destroy(obj);
    end
    table.remove(self._playedTiles[clientSeat], nums);
    if (self._pointer ~= nil) then
        self._pointer:SetActive(false);
    end
end

function _module:ThrowTile(id)
	local play = false;
    if (self._room ~= nil) then
        play = self._room:DoPlayTile(id);
	end
    if (not play and self._selectedTile ~= id) then
        self:SelectHandTile(id);
	end
end

function _module:ClickTile(id)
	if (self._selectedTile == id) then
		local play = false;
        if (self._room ~= nil) then
            play = self._room:DoPlayTile(id);
		end
        if (not play) then
            self:UnselectHandTile();
		end
	else
        self:SelectHandTile(id);
	end
end

function _module:SelectHandTile(id)
    self:UnselectHandTile();
	local tile = self._handTiles[1][id];
	if (tile == nil) then
		if (self._fetchID == id) then
			tile = self._fetchTiles[1];
		end
	end
    if (tile ~= nil) then
		self._selectedTile = id;
        local trans = tile.transform;
		if (trans ~= nil) then
			local oldPos = trans.anchoredPosition;
			local newPos = Vector2(oldPos.x, oldPos.y + 20.0);
            trans.anchoredPosition = newPos;
		end
	else
		self._selectedTile = -1;
    end
end

function _module:UnselectHandTile()
	if (self._selectedTile == -1) then
		return;
	end
	local tile = self._handTiles[1][self._selectedTile];
	if (tile == nil) then
		if (self._fetchID == self._selectedTile) then
			tile = self._fetchTiles[1];
		end
	end
    if (tile ~= nil) then
        local trans = tile.transform;
		if (trans ~= nil) then
            local oldPos = trans.anchoredPosition;
			local newPos = Vector2(oldPos.x, oldPos.y - 20.0);
            trans.anchoredPosition = newPos;
		end
    end
	self._selectedTile = -1;
end

function _module:ShowActionEffect(clientSeat, effect)
    if (clientSeat < 1 or clientSeat > 4) then
		return;
	end
    local prefab = self._effectPrefabs[effect];
    if (prefab == nil) then
        return;
    end
    local obj = CS.UnityEngine.GameObject.Instantiate(prefab, self._playedParents[clientSeat]);
    if (obj ~= nil) then
        local trans = obj.transform;
        if (trans ~= nil) then
            trans.anchoredPosition = self._effectPositions[clientSeat];
        end
        CS.UnityEngine.GameObject.Destroy(obj, 0.5);
    end
end

function _module.NewInstance()
    local t = setmetatable({}, { __index = _module });
    return t;
end

return _module;